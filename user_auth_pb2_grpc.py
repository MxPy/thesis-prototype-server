# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import user_auth_pb2 as user__auth__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in user_auth_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthUserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/authUser.AuthUserService/RegisterUser',
                request_serializer=user__auth__pb2.RegisterRequest.SerializeToString,
                response_deserializer=user__auth__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.RegisterAdmin = channel.unary_unary(
                '/authUser.AuthUserService/RegisterAdmin',
                request_serializer=user__auth__pb2.RegisterRequest.SerializeToString,
                response_deserializer=user__auth__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/authUser.AuthUserService/DeleteUser',
                request_serializer=user__auth__pb2.UserIdRequest.SerializeToString,
                response_deserializer=user__auth__pb2.Empty.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/authUser.AuthUserService/UpdateUser',
                request_serializer=user__auth__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=user__auth__pb2.User.FromString,
                _registered_method=True)
        self.ResetPassword = channel.unary_unary(
                '/authUser.AuthUserService/ResetPassword',
                request_serializer=user__auth__pb2.ResetPasswordRequest.SerializeToString,
                response_deserializer=user__auth__pb2.ResetPasswordResponse.FromString,
                _registered_method=True)
        self.GetPermissionLevel = channel.unary_unary(
                '/authUser.AuthUserService/GetPermissionLevel',
                request_serializer=user__auth__pb2.UserIdRequest.SerializeToString,
                response_deserializer=user__auth__pb2.PermissionLevelResponse.FromString,
                _registered_method=True)
        self.GetUserByNickname = channel.unary_unary(
                '/authUser.AuthUserService/GetUserByNickname',
                request_serializer=user__auth__pb2.UserNickRequest.SerializeToString,
                response_deserializer=user__auth__pb2.User.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/authUser.AuthUserService/Login',
                request_serializer=user__auth__pb2.LoginRequest.SerializeToString,
                response_deserializer=user__auth__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.DeleteAllUsers = channel.unary_unary(
                '/authUser.AuthUserService/DeleteAllUsers',
                request_serializer=user__auth__pb2.Empty.SerializeToString,
                response_deserializer=user__auth__pb2.Empty.FromString,
                _registered_method=True)
        self.GetAllUsers = channel.unary_unary(
                '/authUser.AuthUserService/GetAllUsers',
                request_serializer=user__auth__pb2.Empty.SerializeToString,
                response_deserializer=user__auth__pb2.UserList.FromString,
                _registered_method=True)
        self.GetUserById = channel.unary_unary(
                '/authUser.AuthUserService/GetUserById',
                request_serializer=user__auth__pb2.UserIdRequest.SerializeToString,
                response_deserializer=user__auth__pb2.User.FromString,
                _registered_method=True)


class AuthUserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterUser(self, request, context):
        """Regular user operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterAdmin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPermissionLevel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserByNickname(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAllUsers(self, request, context):
        """Dev operations for users
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthUserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=user__auth__pb2.RegisterRequest.FromString,
                    response_serializer=user__auth__pb2.RegisterResponse.SerializeToString,
            ),
            'RegisterAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAdmin,
                    request_deserializer=user__auth__pb2.RegisterRequest.FromString,
                    response_serializer=user__auth__pb2.RegisterResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=user__auth__pb2.UserIdRequest.FromString,
                    response_serializer=user__auth__pb2.Empty.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=user__auth__pb2.UpdateUserRequest.FromString,
                    response_serializer=user__auth__pb2.User.SerializeToString,
            ),
            'ResetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetPassword,
                    request_deserializer=user__auth__pb2.ResetPasswordRequest.FromString,
                    response_serializer=user__auth__pb2.ResetPasswordResponse.SerializeToString,
            ),
            'GetPermissionLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPermissionLevel,
                    request_deserializer=user__auth__pb2.UserIdRequest.FromString,
                    response_serializer=user__auth__pb2.PermissionLevelResponse.SerializeToString,
            ),
            'GetUserByNickname': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserByNickname,
                    request_deserializer=user__auth__pb2.UserNickRequest.FromString,
                    response_serializer=user__auth__pb2.User.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=user__auth__pb2.LoginRequest.FromString,
                    response_serializer=user__auth__pb2.LoginResponse.SerializeToString,
            ),
            'DeleteAllUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAllUsers,
                    request_deserializer=user__auth__pb2.Empty.FromString,
                    response_serializer=user__auth__pb2.Empty.SerializeToString,
            ),
            'GetAllUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllUsers,
                    request_deserializer=user__auth__pb2.Empty.FromString,
                    response_serializer=user__auth__pb2.UserList.SerializeToString,
            ),
            'GetUserById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserById,
                    request_deserializer=user__auth__pb2.UserIdRequest.FromString,
                    response_serializer=user__auth__pb2.User.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'authUser.AuthUserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('authUser.AuthUserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthUserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authUser.AuthUserService/RegisterUser',
            user__auth__pb2.RegisterRequest.SerializeToString,
            user__auth__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authUser.AuthUserService/RegisterAdmin',
            user__auth__pb2.RegisterRequest.SerializeToString,
            user__auth__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authUser.AuthUserService/DeleteUser',
            user__auth__pb2.UserIdRequest.SerializeToString,
            user__auth__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authUser.AuthUserService/UpdateUser',
            user__auth__pb2.UpdateUserRequest.SerializeToString,
            user__auth__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authUser.AuthUserService/ResetPassword',
            user__auth__pb2.ResetPasswordRequest.SerializeToString,
            user__auth__pb2.ResetPasswordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPermissionLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authUser.AuthUserService/GetPermissionLevel',
            user__auth__pb2.UserIdRequest.SerializeToString,
            user__auth__pb2.PermissionLevelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserByNickname(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authUser.AuthUserService/GetUserByNickname',
            user__auth__pb2.UserNickRequest.SerializeToString,
            user__auth__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authUser.AuthUserService/Login',
            user__auth__pb2.LoginRequest.SerializeToString,
            user__auth__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAllUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authUser.AuthUserService/DeleteAllUsers',
            user__auth__pb2.Empty.SerializeToString,
            user__auth__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authUser.AuthUserService/GetAllUsers',
            user__auth__pb2.Empty.SerializeToString,
            user__auth__pb2.UserList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authUser.AuthUserService/GetUserById',
            user__auth__pb2.UserIdRequest.SerializeToString,
            user__auth__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
