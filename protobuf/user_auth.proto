syntax = "proto3";

package authUser;

service AuthUserService {
  // Regular user operations
  rpc RegisterUser(RegisterRequest) returns (RegisterResponse);
  rpc RegisterAdmin(RegisterRequest) returns (RegisterResponse);
  rpc DeleteUser(UserIdRequest) returns (Empty);
  rpc UpdateUser(UpdateUserRequest) returns (User);
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);
  rpc GetPermissionLevel(UserIdRequest) returns (PermissionLevelResponse);
  rpc GetUserByNickname(UserNickRequest) returns (User);
  rpc Login(LoginRequest) returns (LoginResponse);
  
  // Dev operations for users
  rpc DeleteAllUsers(Empty) returns (Empty);
  rpc GetAllUsers(Empty) returns (UserList);
  rpc GetUserById(UserIdRequest) returns (User);
}

// Base messages
message Empty {}

message User {
  string id = 1;
  string username = 2;
  string password = 3;
  string password_reset_code = 4;
  int32 permission_level = 5;  // 0 - user, 1 - admin, 2 - backend admin
  string salt = 6;
}


// Request/Response messages for user operations
message RegisterRequest {
  string username = 1;
  string password = 2;
  string password_reset_code = 3;
}

message RegisterResponse {
  string user_id = 1;
  string password_reset_code = 2;
}

message UserIdRequest {
  string user_id = 1;
}

message UserNickRequest {
  string username = 1;
}

message UpdateUserRequest {
  string user_id = 1;
  optional string username = 2;
  optional string password = 4;
}

message ResetPasswordRequest {
  string username = 1;
  string password_reset_code = 2;
  string new_password = 3;
}

message ResetPasswordResponse {
  string password_reset_code = 1;
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string user_id = 1;
}

message PermissionLevelResponse {
  int32 permission_level = 1;
}

// List response for get all operation
message UserList {
  repeated User users = 1;
}